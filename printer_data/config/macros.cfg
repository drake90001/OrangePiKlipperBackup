[gcode_macro G29]
gcode:
 BED_MESH_CALIBRATE
 G1 X151 Y115 Z5 F15000

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %} 

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE

[gcode_macro SETUP_FCU_AXES]
description: Set Stepper currents active for XYZ Axes
gcode:
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT=.650 
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT=.650 
    SET_TMC_CURRENT STEPPER=stepper_z CURRENT=.725

[gcode_macro SETUP_FCU_IDLE]
description: Set Stepper currents idle for XYZ Axes
gcode:
  SET_TMC_CURRENT STEPPER=stepper_y CURRENT=.650 HOLDCURRENT=.5
  SET_TMC_CURRENT STEPPER=stepper_x CURRENT=.650 HOLDCURRENT=.5
  SET_TMC_CURRENT STEPPER=stepper_z CURRENT=.725 HOLDCURRENT=.5

[gcode_macro COMPLETE]
description: Print complete sequence
gcode:
  {% if "y" in printer.toolhead.homed_axes %}
  M83
  SET_GCODE_OFFSET X=0 Y=0
  G91 ;Relative coordinates
  G1 Z3 E-1 F3000 ;Clear printspace
  G90 ;Absolute coordinates
  PARK
  G1 Y{printer.toolhead.axis_maximum.y} F{printer["gcode_macro GLOBALS"].travel_speed_mm * 60}
  {% endif %}
  SETUP_FCU_IDLE
  SETUP_GCU_IDLE
  M107
  M84 ;Turn steppers off  

[gcode_macro SENSORLESS_HOME_X]
  gcode:
    
    {% set HOME_CUR = 0.580 %}
    {% set driver_config = printer.configfile.settings['tmc2209 stepper_x'] %}
    {% set RUN_CUR = driver_config.run_current %}
    # Set current for sensorless homing
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CUR}
    # Pause to ensure driver stall flag is clear
    G4 P2000
    # Home
    G28 X0
    # Move away
    G90
    G1 X5 F1200
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CUR}
    
[gcode_macro START_PRINT]
gcode:
    G92 E0 ; Reset Extruder
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    M140 S{BED_TEMP} ;Start heating bed
    G28 ; Home all axes
    M190 S{BED_TEMP} ;Wait for bed to reach temp before proceeding
    M104 S{EXTRUDER_TEMP} ;Start heating extruder
    BED_MESH_CALIBRATE ADAPTIVE=1; Auto bed leveling
    M109 S{EXTRUDER_TEMP} ;Wait for extruder to reach temp before proceeding
    G1 Z2.0 F3000 ; Move Z Axis up little to prevent scratching of Heat Bed
    G1 X0.1 Y20 Z0.3 F5000.0 ; Move to start position
    G1 X0.1 Y200.0 Z0.3 F1500.0 E15 ; Draw the first line
    G1 X0.4 Y200.0 Z0.3 F5000.0 ; Move to side a little
    G1 X0.4 Y20 Z0.3 F1500.0 E30 ; Draw the second line
    G92 E0 ; Reset Extruder
    G1 Z2.0 F3000 ; Move Z Axis up little to prevent scratching of Heat Bed
    G1 X5 Y20 Z0.3 F5000.0 ; Move over to prevent blob squish
    
[exclude_object]

[gcode_macro END_PRINT]
gcode:
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    # Move nozzle away from print while retracting
    G91
    G1 X-2 Y-2 E-6 F300
    # Raise nozzle by 10mm
    G1 Z10 F3000
    G90
    # Disable steppers
    M84
    
[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
    ##### get user parameters or use default #####
    {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
    {% set idle_timeout = client.idle_timeout|default(0) %}
    {% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
    {% set restore = False if printer.toolhead.extruder == ''
    else True  if params.RESTORE|default(1)|int == 1 else False %}
    ##### end of definitions #####
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
    # set a new idle_timeout value
    {% if idle_timeout > 0 %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
    SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
    {% endif %}
    PAUSE_BASE
    {client.user_pause_macro|default("")}
    _TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}
    
[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
variable_last_extruder_temp: {'restore': False, 'temp': 0}
variable_restore_idle_timeout: 0
variable_idle_state: False
gcode:
    ##### get user parameters or use default #####
    {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
    {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
    {% set sp_move = client.speed_move|default(velocity) %}
    {% set runout_resume = True if client.runout_sensor|default("") == ""     # no runout
    else True if not printer[client.runout_sensor].enabled  # sensor is disabled
    else printer[client.runout_sensor].filament_detected %} # sensor status
    {% set can_extrude = True if printer.toolhead.extruder == ''           # no extruder defined in config
    else printer[printer.toolhead.extruder].can_extrude %} # status of active extruder
    {% set do_resume = False %}
    {% set prompt_txt = [] %}
    ##### end of definitions #####
    #### Printer comming from timeout idle state ####
    {% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
    {% if last_extruder_temp.restore %}
    # we need to use the unicode (\u00B0) for the Â° as py2 env's would throw an error otherwise
    RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
    M109 S{last_extruder_temp.temp}
    {% set do_resume = True %}
    {% elif can_extrude %}
    {% set do_resume = True %}
    {% else %}
    RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
    {% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
    {% endif %}
    #### Printer comming out of regular PAUSE state ####
    {% elif can_extrude %}
    {% set do_resume = True %}
    {% else %}
    RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
    {% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
    {% endif %}
    {% if runout_resume %}
    {% if do_resume %}
    {% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %} # restore idle_timeout time
    {client.user_resume_macro|default("")}
    _CLIENT_EXTRUDE
    RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
    {% endif %}
    {% else %}
    RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
    {% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
    {% endif %}
    ##### Generate User Information box in case of abort #####
    {% if not (runout_resume and do_resume) %}
    RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
    {% for element in prompt_txt %}
    RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}'
    {% endfor %}
    RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
    RESPOND TYPE=command MSG="action:prompt_show"
    {% endif %}
    
[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    ##### get user parameters or use default #####
    {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
    {% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
    {% set retract = client.cancel_retract|default(5.0)|abs %}
    ##### define park position #####
    {% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
    else "X=" ~ client.park_at_cancel_x %}
    {% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
    else "Y=" ~ client.park_at_cancel_y %}
    {% set custom_park = park_x|length > 0 or park_y|length > 0 %}
    ##### end of definitions #####
    # restore idle_timeout time if needed
    {% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
    SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
    {% endif %}
    {% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
    _CLIENT_RETRACT LENGTH={retract}
    TURN_OFF_HEATERS
    M106 S0
    {client.user_cancel_macro|default("")}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
    # clear pause_next_layer and pause_at_layer as preparation for next print
    SET_PAUSE_NEXT_LAYER ENABLE=0
    SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
    CANCEL_PRINT_BASE